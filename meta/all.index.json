{
  "ownKey": "internal",
  "childrenPages": {
    "tutorial": {
      "ownKey": "tutorial",
      "childrenPages": {"2019": {
        "ownKey": "2019",
        "childrenPages": {"10": {
          "ownKey": "10",
          "childrenPages": {
            "29": {
              "ownKey": "29",
              "childrenPages": {"learning-ionic-angular-part-1---id": {
                "ownKey": "learning-ionic-angular-part-1---id",
                "ownPages": [{
                  "reference": {
                    "path": "tutorial/2019/10/29",
                    "baseUrl": "/",
                    "fileName": "learning-ionic-angular-part-1---id/",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "/tutorial/2019/10/29/learning-ionic-angular-part-1---id"
                  },
                  "next": {
                    "path": "tutorial/2019/10/30",
                    "baseUrl": "/",
                    "fileName": "how-my-repositories-organized-part-1---id/",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "/tutorial/2019/10/30/how-my-repositories-organized-part-1---id"
                  },
                  "description": "",
                  "title": "Tutorial IONIC dengan Angular Framework - Part #1 (Persiapan)",
                  "content": "<p>JIKA KAMU INGIN MENGETAHUI RINGKASAN MATERI ARTIKEL INI. KAMU BISA LIHAT BAGIAN <strong>KESIMPULAN<\/strong> PADA BAGIAN PALING BAWAH ARTIKEL.<\/p>\n<hr />\n<h2 id=\"pengenalan\">Pengenalan<\/h2>\n<p><strong>IONIC<\/strong> adalah <em>framework<\/em> untuk <em>Hybrid app development<\/em>. <strong>IONIC<\/strong> adalah <em>framework<\/em> yang ringan, jadi ga perlu khawatir dengan komputermu (jika memiliki spesifikasi kecil), setidaknya kamu menggunakan RAM 2GB dan Hardisk 50 GB sudah cukup.<\/p>\n<p>Yang paling utama adalah <em>software<\/em> pendukung yang diperlukan untuk proses development <strong>IONIC App<\/strong> :<\/p>\n<ul>\n<li>Node &amp; NPM - <a href=\"https://nodejs.org/en/\">Instal di sini<\/a><\/li>\n<li>Text Editor - <a href=\"https://code.visualstudio.com/\">VS Code<\/a><\/li>\n<li>Pengetahuan dasar tentang menjalankan perintah <code>cmd<\/code> / <code>terminal<\/code><\/li>\n<li>Pengetahuan tentang <code>javascript<\/code><\/li>\n<li>Pengetahuan tentang framework <code>javascript<\/code>, yaitu <a href=\"https://angular.io/\">Angular<\/a>.<\/li>\n<\/ul>\n<p>Pada artikel ini dan selanjutnya, saya akan menggunakan <a href=\"https://code.visualstudio.com/\">VS Code<\/a> dan menggunakan framework <a href=\"https://angular.io/\">Angular<\/a>.<\/p>\n<hr />\n<h2 id=\"1-instalasi-npm\"><a href=\"https://www.npmjs.com/get-npm\">1. Instalasi NPM<\/a><\/h2>\n<p>Kamu bisa membaca <a href=\"https://nodejs.org/en/download/package-manager/\">Dokumentasi NPM di sini<\/a> untuk melakukan proses instalasi. Untuk memastikan bahwa instalasi berhasil, kamu bisa menjalankan : <code>npm -v<\/code> dan <code>node --version<\/code>.<\/p>\n<p>Ini contoh <em>output<\/em> dari terminal :<\/p>\n<pre><code class=\"language-bash\">$ npm -v\n6.12.0\n\n$ node --version\nv10.16.3\n<\/code><\/pre>\n<p>Jika 2 perintah di atas berhasil menampilkan versi <code>npm<\/code> dan <code>node<\/code> tanpa <em>error<\/em>.\nKamu bisa lanjut ke langkah berikutnya.<\/p>\n<hr />\n<h2 id=\"2-instalasi-ionic\"><a href=\"https://ionicframework.com/docs/installation/cli\">2. Instalasi IONIC<\/a><\/h2>\n<p>Kamu bisa membaca <a href=\"https://ionicframework.com/docs/installation/cli\">Dokumentasi IONIC di sini<\/a> untuk melakukan proses instalasi IONIC CLI.<\/p>\n<p>Singkatnya, jika <code>npm<\/code> sudah terpasang di komputermu, maka kamu hanya perlu menjalankan perintah : <code>npm install -g ionic<\/code>. Kemudian, untuk mengetahui apakah <code>ionic<\/code> telah terpasang, kamu bisa menjalankan perintah : <code>ionic -v<\/code> di terminal.<\/p>\n<pre><code class=\"language-bash\">$ ionic -v\n5.4.1\n<\/code><\/pre>\n<hr />\n<h2 id=\"3-instalasi-angular-cli\"><a href=\"https://angular.io/\">3. Instalasi Angular CLI<\/a><\/h2>\n<p>Proses selanjutnya adalah instalasi <a href=\"https://angular.io/cli\">Angular CLI<\/a> bisa dilihat <a href=\"https://angular.io/cli\">di sini<\/a>. Kamu hanya perlu menjalankan perintah <code>npm install -g @angular/cli<\/code>.<\/p>\n<p>Pastikan instalasi <strong>Angular CLI<\/strong> berhasil dengan menjalankan perintah <code>ng version<\/code>.<\/p>\n<p>Akan keluar <em>output<\/em> seperti di bawah ini :<\/p>\n<pre><code class=\"language-bash\">$ ng version\n\n     _                      _                 ____ _     ___\n    / \\   _ __   __ _ _   _| | __ _ _ __     / ___| |   |_ _|\n   / â–³ \\ | '_ \\ / _` | | | | |/ _` | '__|   | |   | |    | |\n  / ___ \\| | | | (_| | |_| | | (_| | |      | |___| |___ | |\n /_/   \\_\\_| |_|\\__, |\\__,_|_|\\__,_|_|       \\____|_____|___|\n                |___/\n    \n\nAngular CLI: 8.3.5\nNode: 10.16.3\nOS: win32 x64\nAngular:\n...\n\nPackage                      Version\n------------------------------------------------------\n@angular-devkit/architect    0.803.5\n@angular-devkit/core         8.3.5\n@angular-devkit/schematics   8.3.5\n@schematics/angular          8.3.5\n@schematics/update           0.803.5\nrxjs                         6.4.0\n<\/code><\/pre>\n<hr />\n<h2 id=\"4-plugin-visual-studio-code\"><a href=\"https://code.visualstudio.com/\">4. Plugin Visual Studio Code<\/a><\/h2>\n<p>Pada artikel ini dan selanjutnya, saya menggunakan <a href=\"https://code.visualstudio.com/\">Visual Studio Code<\/a> sebagai teks editor. Kamu bisa instal plugin <strong>Angular Essentials<\/strong> untuk memudahkan proses development aplikasi ionic, <a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials\">lihat di sini<\/a>.<\/p>\n<p>Untuk mempelajari cara memasang ekstensi di <strong>Visual Studio Code<\/strong>, kamu bisa membaca dokumentasi resmi Visual Studio Code di <a href=\"https://code.visualstudio.com/docs/editor/extension-gallery\">link berikut<\/a>.<\/p>\n<hr />\n<h2 id=\"kesimpulan\">Kesimpulan<\/h2>\n<p>Artikel ini membahas tentang persiapan apa saja sebelum kita memulai untuk <em>ngoding<\/em> ionic. Yaitu, instalasi beberapa program berikut :<\/p>\n<ol>\n<li>Instalasi Node &amp; NPM - <a href=\"https://nodejs.org/en/\">NodeJs.org<\/a><\/li>\n<li>Instalasi Ionic Framework - <a href=\"https://ionicframework.com/docs/installation/cli\">Ionic CLI Docs<\/a><\/li>\n<li>Angular CLI - <a href=\"https://angular.io/cli\">Angular CLI Docs<\/a><\/li>\n<li>Memasang plugin <strong>Angular Essentials<\/strong> di Visual Studio Code - <a href=\"https://code.visualstudio.com/docs/editor/extension-gallery\">Cara memasang ekstensi<\/a>, <a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials\">Angular Essentials<\/a><\/li>\n<\/ol>\n<p>Setelah proses intalasi program - program di atas selesai. Kita bisa mulai mencoba untuk mempelajari Angular dan Ionic.<\/p>\n"
                }]
              }}
            },
            "30": {
              "ownKey": "30",
              "childrenPages": {"how-my-repositories-organized-part-1---id": {
                "ownKey": "how-my-repositories-organized-part-1---id",
                "ownPages": [{
                  "reference": {
                    "path": "tutorial/2019/10/30",
                    "baseUrl": "/",
                    "fileName": "how-my-repositories-organized-part-1---id/",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "/tutorial/2019/10/30/how-my-repositories-organized-part-1---id"
                  },
                  "next": {
                    "path": "tutorial/2019/10/31",
                    "baseUrl": "/",
                    "fileName": "room-db-get-started---id/",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "/tutorial/2019/10/31/room-db-get-started---id"
                  },
                  "previous": {
                    "path": "tutorial/2019/10/29",
                    "baseUrl": "/",
                    "fileName": "learning-ionic-angular-part-1---id/",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "/tutorial/2019/10/29/learning-ionic-angular-part-1---id"
                  },
                  "description": "",
                  "title": "Bagaimana Aku Menangani Repositori di Android - Part #1",
                  "content": "<h2 id=\"pembuka\">Pembuka<\/h2>\n<p><strong>Repository Pattern<\/strong> semakin popular sejak ia pertama kali diperkenalkan sebagai bagian dari Domain-Driven Design di tahun 2004. Pada dasarnya, repositori menyediakan abstraksi data, maka aplikasi utama akan mengakses data melalui abstraksi yang lebih simpel tanpa mengetahui kerumitan akses data di <em>lower level<\/em>. (<a href=\"https://deviq.com/repository-pattern/\">sumber<\/a>)<\/p>\n<p>Pada dasarnya, manipulasi data terdiri dari, (1) Create, (2) Read, (3) Update, (4) Delete yang seringkali disebut C.R.U.D. Diperlukan pengaturan koneksi database, kemudian menjalankan <em>query<\/em>, mengolah <em>cursor<\/em> dan mengubah hasil mentah data agar diterima oleh UI (user interface - mapping). <em>Ribet, toh<\/em>.<\/p>\n<p>Dengan menggunakan <strong>Repository Pattern<\/strong>, semua itu ga perlu diletakkan di <strong>activity<\/strong>. Biarkan repositori yang bertugas mengerjakan ke-<em>ruwet<\/em>-an tersebut.<\/p>\n<hr />\n<p>Arsitektur dalam pengembangan aplikasi itu penting, biar ngga keteteran sana sini ketika ngoding, apalagi <em>maintenance<\/em>. Tentu kita ga boleh <em>stuck<\/em> dengan cara ngoding tradisional tanpa arsitektur. <strong>Ha?<\/strong><\/p>\n<p>Ya maksudnya, kita punya puluhan bahkan ratusan <em>method<\/em> di dalam satu <em>activity<\/em>.<\/p>\n<p>Misalnya kita mau <strong>open connection<\/strong> ke SQLite, kita <strong>copas<\/strong> dari class activity yang sudah nerapin kodingan tersebut, karena kita ga mau susah. Atau, kita lakukan penarikan data SQLite dan membuat <strong>request API<\/strong> di dalam activity.<\/p>\n<p><strong>... DI DALAM ACTIVITY WOI!<\/strong><\/p>\n<p>&quot;Tapi kan, data-nya emang dibutuhkan sama Activity itu.&quot;<\/p>\n<p>Hm.<\/p>\n<p>Ya emang <em>sih<\/em>. TAPI YA, itu bikin NGERI. Semisal kamu punya 50 Activity, kemudian ada update di 1 API, kamu mau ganti satu - satu ngliatin activity-nya? <em>Ngga deh<\/em>, mending yuk move-on!<\/p>\n<p>Minimal, gunakan <strong>repository pattern<\/strong>.<\/p>\n<p>&quot;<em>Ha?<\/em> Github donk. Pake <em>repository<\/em>.&quot;<\/p>\n<p>Bukan WOI.<\/p>\n<p>Tapi, <em>okelah<\/em> begini penjelasannya.<\/p>\n<hr />\n<h2 id=\"tentang-repositori\">Tentang Repositori<\/h2>\n<p>Repositori (<em>repository<\/em>) berguna sebagai <strong>single source of truth<\/strong> atas semua data yang kamu punya. Ini adalah ilustrasi yang menggambarkannya dengan baik, lihat :<\/p>\n<p><img src=\"/assets/media/graphs/img-repo-1.png\" alt=\"Ilustrasi 1\" title=\"Ilustrasi Repositori Tunggal\" /><\/p>\n<p>Gambar di atas sudah menjelaskan cukup baik tentang konsep <strong>single source of truth<\/strong> dari repositori, dimana repositori menjadi satu - satunya sumber atas semua data yang diambil, dari <a href=\"https://www.restapitutorial.com/lessons/whatisrest.html\"><strong>API<\/strong><\/a> maupun <a href=\"https://developer.android.com/training/data-storage/sqlite\"><strong>SQLite<\/strong><\/a>.<\/p>\n<p>Maka, apabila <strong>LoginActivity<\/strong> membutuhkan proses login dari API, maka <strong>LoginActivity<\/strong> hanya perlu melaksanakan proses login melalui repositori. Begitu pula, apabila <strong>HomeActivity<\/strong> memerlukan data profil pengguna, berita ataupun list banner, maka <strong>HomeActivity<\/strong> tersebut perlu meminta melalui repositori juga.<\/p>\n<p>Sayangnya, itu hanya SATU repositori.<\/p>\n<p>Pada penerapan repositori, kamu bisa membuat <strong>1 <a href=\"https://refactoring.guru/design-patterns/singleton\">singleton class<\/a><\/strong> untuk mengatur semua aliran data. TAPI YA, namanya <a href=\"https://refactoring.guru/design-patterns/singleton\"><strong>singleton<\/strong><\/a>, kalo makin banyak Endpoint API dan <em>table<\/em> SQLite yang dibuat, pasti semakin <em>gemuk<\/em> dan tidak beraturan jadinya.<\/p>\n<hr />\n<p>Oleh karena itu, diperlukan klasifikasi repositori yang lebih spesifik, seperti ini :<\/p>\n<p><img src=\"/assets/media/graphs/img-repo-2.png\" alt=\"Ilustrasi 2\" title=\"Ilustrasi Multi Repository\" /><\/p>\n<p>Di sini kita membagi repositori menjadi 3 tugas spesifik :<\/p>\n<ol>\n<li>\n<p><strong>User Repository<\/strong> - Dimana <strong>UserRepository<\/strong> bertanggungjawab atas semua data yang berhubungan dengan pengguna (<em>user<\/em>). Seperti proses pendaftaran, autentikasi, pengambilan profil ataupun melakukan perubahan profil.<\/p>\n<\/li>\n<li>\n<p><strong>News Repository<\/strong> - Bertanggungjawab atas semua data yang berhubungan dengan berita (<em>news<\/em>). Seperti pengambilan data berita, penyaringan (<em>filter<\/em>) berita, berita populer ataupun proses pemberian komentar / <em>like<\/em> kepada berita tertentu.<\/p>\n<\/li>\n<li>\n<p><strong>Content Repository<\/strong> - Bertanggungjawab atas data yang berhubungan dengan konten singkat atau preferensi pengguna (<em>user preferences<\/em>). Seperti <em>list<\/em> banner, notifikasi, menyimpan pengaturan tema <em>dark / light<\/em> dan semacamnya.<\/p>\n<\/li>\n<\/ol>\n<p>Penentuan jenis repositori seperti ini terserah kalian. Sesuaikan saja dengan kondisi dan kebutuhan <em>project<\/em>.<\/p>\n<hr />\n<p>Meskipun kita membagi repositori menjadi 3 bagian, BUKAN BERARTI bahwa SQLite dan API-nya harus ada 3. Perhatikan :<\/p>\n<p><img src=\"/assets/media/graphs/img-repo-3.png\" alt=\"Ilustrasi 3\" title=\"Ilustrasi Multi Repository (2)\" /><\/p>\n<p>Dari ilustrasi di atas, akses API hanya ada 1, namun API memiliki beberapa <a href=\"https://stackoverflow.com/questions/2122604/what-is-an-endpoint\"><strong>endpoints<\/strong><\/a> seperti :<\/p>\n<ul>\n<li>login [<strong>POST<\/strong> /api/v1/login]<\/li>\n<li>register [<strong>POST<\/strong> /api/v1/register]<\/li>\n<li>profile [<strong>GET<\/strong> /api/v1/me]<\/li>\n<li>allnews [<strong>GET<\/strong> /api/v1/news]<\/li>\n<li>filternews [<strong>GET<\/strong> /api/v1/news?query=search&amp;sort=relevance]<\/li>\n<li>popularnews [<strong>GET<\/strong> /api/v1/news?by=popular]<\/li>\n<li>bannerlist [<strong>GET<\/strong> /api/v1/banners]<\/li>\n<li>dan lainnya.<\/li>\n<\/ul>\n<p>Kemudian untuk setiap <a href=\"https://stackoverflow.com/questions/2122604/what-is-an-endpoint\"><strong>endpoints<\/strong><\/a> kita menentukan <strong>tipe repositori<\/strong>-nya :<\/p>\n<ul>\n<li>login [<strong>POST<\/strong> /api/v1/login] - <strong>UserRepo<\/strong><\/li>\n<li>register [<strong>POST<\/strong> /api/v1/register] - <strong>UserRepo<\/strong><\/li>\n<li>profile [<strong>GET<\/strong> /api/v1/me] - <strong>UserRepo<\/strong><\/li>\n<li>allnews [<strong>GET<\/strong> /api/v1/news] - <strong>NewsRepo<\/strong><\/li>\n<li>filternews [<strong>GET<\/strong> /api/v1/news?query=search&amp;sort=relevance] - <strong>NewsRepo<\/strong><\/li>\n<li>popularnews [<strong>GET<\/strong> /api/v1/news?by=popular] - <strong>NewsRepo<\/strong><\/li>\n<li>bannerlist [<strong>GET<\/strong> /api/v1/banners] - <strong>ContentRepo<\/strong><\/li>\n<\/ul>\n<p>Mudah, kan?<\/p>\n<p><img src=\"/assets/media/graphs/img-repo-3.png\" alt=\"Ilustrasi 3\" title=\"Ilustrasi Multi Repository (2)\" /><\/p>\n<p>Perhatikan juga, bahwa ilustrasi di atas menunjukkan bahwa :<\/p>\n<p>(1) <strong>LoginActivity<\/strong> yang bertugas sebagai halaman masuk pengguna, hanya menggunakan <strong>UserRepository<\/strong>. (2) <strong>RegisterActivity<\/strong> yang bertugas sebagai halaman pendaftaran pengguna, hanya menggunakan <strong>UserRepository<\/strong> juga. (3) <strong>HomeActivity<\/strong> yang menampilkan Banner, berita populer, dan sedikit informasi pengguna menggunakan <strong>UserRepository<\/strong>, <strong>NewsRepository<\/strong> dan <strong>ContentRepository<\/strong> secara bersamaan. (4) <strong>NewsActivity<\/strong> yang menampilkan dan memberikan fitur pencarian berita hanya menggunakan <strong>NewsRepository<\/strong> saja.<\/p>\n<p>Maka, repositori digunakan di <strong>activity<\/strong> yang membutuhkannya saja.<\/p>\n<p>Misalnya, (1) <strong>LoginActivity<\/strong> tidak perlu menggunakan <strong>NewsRepository<\/strong>, karena tidak ada satupun informasi tentang berita yang ditampilkan di <strong>LoginActivity<\/strong>. (2) Berlaku pula pada <strong>RegisterActivity<\/strong>, <em>toh<\/em> jika memang ada berita yang tampil di halaman Login dan Registrasi, maka kamu bisa menggunakan <strong>NewsRepository<\/strong> tanpa menghalangi alur <strong>UserRepository<\/strong>.<\/p>\n<hr />\n<h3 id=\"kesimpulan\">Kesimpulan<\/h3>\n<p>Kamu bisa menerapkan <strong>repository pattern<\/strong>, dimulai dari memahami dan memikirkan dengan baik struktur data yang disediakan via API (remote) dan SQLite (local).<\/p>\n<p>Singkatnya :<\/p>\n<ol>\n<li>Klasifikasikan tipe repositori,<\/li>\n<li>Pilah <strong>remote endpoint<\/strong> untuk dimasukkan ke tipe repositori yang sesuai,<\/li>\n<li>Pilah data <strong>SQLite<\/strong> untuk dimasukkan pula ke tipe repositori yang sesuai,<\/li>\n<li>Selesai, tinggal ngoding-nya aja.<\/li>\n<\/ol>\n<p>Penerapan repositori akan dibahas di <em>part<\/em> selanjutnya.<\/p>\n<hr />\n<h3 id=\"catatan\">Catatan<\/h3>\n<p>Jika kamu memiliki sumber data lain, seperti :<\/p>\n<ul>\n<li>SharedPreferences, atau<\/li>\n<li>File / Internal Storage / External Storage<\/li>\n<\/ul>\n<p>Maka, bisa diklasifikasi sebagai <em>local data source<\/em> seperti <strong>SQLite<\/strong>.<\/p>\n<p><img src=\"/assets/media/graphs/img-repo-4.png\" alt=\"Ilustrasi 4\" title=\"Ilustrasi Multi Repository (3)\" /><\/p>\n<p>Normalnya, apa yang berasal dari luar disebut sebagai <strong>remote data source<\/strong> dan apa yang berasal dari gawai, disebut <strong>local data source<\/strong>.<\/p>\n<hr />\n<p>Pada artikel selanjutnya, akan ku bahas detail implementasi dari <strong>Repository Pattern<\/strong> menggunakan <strong>Room Database<\/strong> dan <strong>Retrofit<\/strong>.<\/p>\n"
                }]
              }}
            },
            "31": {
              "ownKey": "31",
              "childrenPages": {"room-db-get-started---id": {
                "ownKey": "room-db-get-started---id",
                "ownPages": [{
                  "reference": {
                    "path": "tutorial/2019/10/31",
                    "baseUrl": "/",
                    "fileName": "room-db-get-started---id/",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "/tutorial/2019/10/31/room-db-get-started---id"
                  },
                  "previous": {
                    "path": "tutorial/2019/10/30",
                    "baseUrl": "/",
                    "fileName": "how-my-repositories-organized-part-1---id/",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "/tutorial/2019/10/30/how-my-repositories-organized-part-1---id"
                  },
                  "description": "",
                  "title": "Room Database : Cara Menggunakan Room DB",
                  "content": "<h3 id=\"pembuka\">Pembuka<\/h3>\n<p>Penggunaan <strong>SQLite<\/strong> secara mentah sudah tidak direkomendasikan, karena tingkat kerumitannya yang membuat proses pengembangan aplikasi menjadi cukup lama. Oleh karena itu, muncullah <strong>Room Database<\/strong> yang merupakan pembungkus (<em>wrapper<\/em>) dari SQLite.<\/p>\n<p>Dengan menggunakan <strong>Room<\/strong>, kita bisa fokus kepada proses bisnis dibandingkan implementasi atau pengaturan database yang kelewat <em>ruwet<\/em>. Jadi, langsung aja kita bahas cara menggunakan <strong>Room<\/strong> di project kamu.<\/p>\n<hr />\n<h3 id=\"mempersiapkan-room-sqlite-database\">Mempersiapkan Room (SQLite) Database<\/h3>\n<hr />\n<p>Lihat cara memasukkan <strong>Room<\/strong> ke Android Studio, <a href=\"https://developer.android.com/jetpack/androidx/releases/room#declaring_dependencies\">disini<\/a>. Kemudian lihat cara penggunaan <strong>Room<\/strong>, <a href=\"https://developer.android.com/training/data-storage/room\">disini<\/a>. Untuk bagian instalasi atau pemasangan <strong>Room<\/strong> di Android Studio bisa mengacu pada tautan di atas. Jadi, prosesnya akan aku lewati.<\/p>\n<p>Berikut langkah - langkah yang untuk menggunakan <strong>Room<\/strong> di project kita.<\/p>\n<hr />\n<h4 id=\"pertama\">Pertama<\/h4>\n<p>Buat sebuah <strong>@Entity<\/strong>, kita sebut <strong>NewsEntity<\/strong> dengan struktur seperti ini :<\/p>\n<pre><code class=\"language-kotlin\">@Entity\ndata class NewsEntity(\n  @PrimaryKey\n  val id: Int? = null,\n  val title: String,\n  val content: String,\n  val date: String,\n  val views: Int\n)\n<\/code><\/pre>\n<hr />\n<h4 id=\"kedua\">Kedua<\/h4>\n<p>Buat <strong>@DAO (Data Access Object)<\/strong> dengan nama <strong>NewsDao<\/strong> seperti ini :<\/p>\n<pre><code class=\"language-kotlin\">@Dao\ninterface NewsDao() {\n\n  // menambahkan data, replace jika ada conflict ID\n  @Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun create(vararg news: NewsEntity)\n\n  @Update\n  fun update(vararg news: NewsEntity)\n\n  @Delete\n  fun delete(vararg news: NewsEntity)\n\n  // mengambil berita dari urutan tanggal terbaru\n  // default limit = 15\n  @Query(&quot;SELECT * FROM NewsEntity ORDER BY date DESC LIMIT :limit&quot;)\n  fun getLatestList(limit: Int = 15): List&lt;NewsEntity&gt;\n\n  // mengambil berita populer berdasarkan view terbanyak\n  // default limit = 5\n  @Query(&quot;SELECT * FROM NewsEntity ORDER BY views DESC LIMIT :limit&quot;)\n  fun getPopularList(limit: Int = 5): List&lt;NewsEntity&gt;\n\n  // mengambil satu berita berdasarkan id, mengembalikan nullable\n  @Query(&quot;SELECT * FROM NewsEntity WHERE id = :id&quot;)\n  fun getOne(id: Int): NewsEntity?\n\n}\n<\/code><\/pre>\n<hr />\n<h4 id=\"ketiga\">Ketiga<\/h4>\n<p>Tambahkan class dengan anotasi <strong>@Database<\/strong> bernama <strong>AppDatabase<\/strong>, sbb :<\/p>\n<pre><code class=\"language-kotlin\">@Database(entities = arrayOf(NewsEntity::class), version = 1)\nabstract class AppDatabase : RoomDatabase() {\n  \n  abstract fun newsDao(): NewsDao\n\n}\n<\/code><\/pre>\n<hr />\n<h4 id=\"keempat\">Keempat<\/h4>\n<p>Agar <strong>Room<\/strong> bisa diakses melalui <strong>Activity<\/strong> manapun, maka kita perlu menulis kode berikut tepat di luar class <strong>AppDatabase<\/strong> :<\/p>\n<pre><code class=\"language-kotlin\">fun Context.getDb() {\n  return Room.databaseBuilder(\n    this,\n    AppDatabase::class.java,\n    &quot;database-name&quot;\n  )\n}\n<\/code><\/pre>\n<p>Hasil akhir <strong>AppDatabase<\/strong> seperti ini :<\/p>\n<pre><code class=\"language-kotlin\">@Database(entities = arrayOf(NewsEntity::class), version = 1)\nabstract class AppDatabase : RoomDatabase() {\n  \n  abstract fun newsDao(): NewsDao\n\n}\n\nfun Context.getDb(): AppDatabase {\n  return Room\n    .databaseBuilder(this, AppDatabase::class.java, &quot;your-db-name&quot;)\n    .allowMainThreadQueries(true)\n    .build()\n}\n<\/code><\/pre>\n<hr />\n<h4 id=\"kelima\">Kelima<\/h4>\n<p>Kita bisa mengambil data berita di <strong>activity<\/strong> melalui <strong>Room<\/strong> dengan cara :<\/p>\n<pre><code class=\"language-kotlin\">\n  private val mLatestNewsList by lazy { mutableListOf&lt;NewsEntity&gt;() }\n  private val mNewsDao by lazy { getDb().newsDao() }\n\n  fun onCreate(savedInstanceState: Bundle) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_news_list)\n\n    mLatestNewsList.addAll( mNewsDao.getLatestList() )\n\n    // TODO something with mLatestNewsList data\n  }\n\n<\/code><\/pre>\n<p>Atau ingin menambahkan data berita dengan membuat fungsi :<\/p>\n<pre><code class=\"language-kotlin\">\nfun createNews(news: NewsEntity) {\n  context\n    .getDb()\n    .newsDao()\n    .insert(news)\n}\n\n<\/code><\/pre>\n<hr />\n<p>Kamu bisa melakukan eksplorasi lebih dalam tentang <strong>Room Database<\/strong> dengan membaca <a href=\"https://developer.android.com/training/data-storage/room\">dokumentasi<\/a>.<\/p>\n"
                }]
              }}
            }
          }
        }}
      }}
    },
    "categories": {
      "ownKey": "categories",
      "childrenPages": {"tutorial": {
        "ownKey": "tutorial",
        "ownPages": [{
          "reference": {
            "path": "categories/tutorial",
            "baseUrl": "/",
            "fileName": "/",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/categories/tutorial",
            "title": "Tutorial"
          },
          "description": "",
          "title": "Tutorial",
          "content": ""
        }]
      }},
      "ownPages": [{
        "reference": {
          "path": "categories",
          "baseUrl": "/",
          "fileName": "/",
          "extension": "html",
          "usePrettyUrl": true,
          "link": "/categories",
          "title": "Categories"
        },
        "description": "",
        "title": "Categories",
        "content": ""
      }]
    },
    "authors": {
      "ownKey": "authors",
      "childrenPages": {"aditya-chandra": {
        "ownKey": "aditya-chandra",
        "ownPages": [{
          "reference": {
            "path": "authors",
            "baseUrl": "/",
            "fileName": "aditya-chandra/",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/authors/aditya-chandra"
          },
          "description": "",
          "title": "Aditya Chandra",
          "content": ""
        }]
      }}
    },
    "tags": {
      "ownKey": "tags",
      "childrenPages": {
        "mvp": {
          "ownKey": "mvp",
          "ownPages": [{
            "reference": {
              "path": "tags/mvp",
              "baseUrl": "/",
              "fileName": "/",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "/tags/mvp",
              "title": "Mvp"
            },
            "description": "",
            "title": "Mvp",
            "content": ""
          }]
        },
        "android": {
          "ownKey": "android",
          "ownPages": [{
            "reference": {
              "path": "tags/android",
              "baseUrl": "/",
              "fileName": "/",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "/tags/android",
              "title": "Android"
            },
            "description": "",
            "title": "Android",
            "content": ""
          }]
        },
        "kotlin": {
          "ownKey": "kotlin",
          "ownPages": [{
            "reference": {
              "path": "tags/kotlin",
              "baseUrl": "/",
              "fileName": "/",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "/tags/kotlin",
              "title": "Kotlin"
            },
            "description": "",
            "title": "Kotlin",
            "content": ""
          }]
        },
        "learning": {
          "ownKey": "learning",
          "ownPages": [{
            "reference": {
              "path": "tags/learning",
              "baseUrl": "/",
              "fileName": "/",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "/tags/learning",
              "title": "Learning"
            },
            "description": "",
            "title": "Learning",
            "content": ""
          }]
        },
        "indonesia": {
          "ownKey": "indonesia",
          "ownPages": [{
            "reference": {
              "path": "tags/indonesia",
              "baseUrl": "/",
              "fileName": "/",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "/tags/indonesia",
              "title": "Indonesia"
            },
            "description": "",
            "title": "Indonesia",
            "content": ""
          }]
        },
        "room": {
          "ownKey": "room",
          "ownPages": [{
            "reference": {
              "path": "tags/room",
              "baseUrl": "/",
              "fileName": "/",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "/tags/room",
              "title": "Room"
            },
            "description": "",
            "title": "Room",
            "content": ""
          }]
        },
        "javascript": {
          "ownKey": "javascript",
          "ownPages": [{
            "reference": {
              "path": "tags/javascript",
              "baseUrl": "/",
              "fileName": "/",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "/tags/javascript",
              "title": "Javascript"
            },
            "description": "",
            "title": "Javascript",
            "content": ""
          }]
        },
        "angular": {
          "ownKey": "angular",
          "ownPages": [{
            "reference": {
              "path": "tags/angular",
              "baseUrl": "/",
              "fileName": "/",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "/tags/angular",
              "title": "Angular"
            },
            "description": "",
            "title": "Angular",
            "content": ""
          }]
        },
        "database": {
          "ownKey": "database",
          "ownPages": [{
            "reference": {
              "path": "tags/database",
              "baseUrl": "/",
              "fileName": "/",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "/tags/database",
              "title": "Database"
            },
            "description": "",
            "title": "Database",
            "content": ""
          }]
        },
        "mvvm": {
          "ownKey": "mvvm",
          "ownPages": [{
            "reference": {
              "path": "tags/mvvm",
              "baseUrl": "/",
              "fileName": "/",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "/tags/mvvm",
              "title": "Mvvm"
            },
            "description": "",
            "title": "Mvvm",
            "content": ""
          }]
        },
        "android-studio": {
          "ownKey": "android-studio",
          "ownPages": [{
            "reference": {
              "path": "tags/android-studio",
              "baseUrl": "/",
              "fileName": "/",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "/tags/android-studio",
              "title": "Android   Studio"
            },
            "description": "",
            "title": "Android   Studio",
            "content": ""
          }]
        },
        "ionic": {
          "ownKey": "ionic",
          "ownPages": [{
            "reference": {
              "path": "tags/ionic",
              "baseUrl": "/",
              "fileName": "/",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "/tags/ionic",
              "title": "Ionic"
            },
            "description": "",
            "title": "Ionic",
            "content": ""
          }]
        },
        "architecture": {
          "ownKey": "architecture",
          "ownPages": [{
            "reference": {
              "path": "tags/architecture",
              "baseUrl": "/",
              "fileName": "/",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "/tags/architecture",
              "title": "Architecture"
            },
            "description": "",
            "title": "Architecture",
            "content": ""
          }]
        }
      },
      "ownPages": [{
        "reference": {
          "path": "tags",
          "baseUrl": "/",
          "fileName": "/",
          "extension": "html",
          "usePrettyUrl": true,
          "link": "/tags",
          "title": "Tags"
        },
        "description": "",
        "title": "Tags",
        "content": ""
      }]
    }
  },
  "ownPages": [
    {
      "reference": {
        "path": "",
        "baseUrl": "/",
        "fileName": "",
        "extension": "html",
        "usePrettyUrl": true,
        "link": "/"
      },
      "description": "",
      "title": "Mediandraa",
      "content": ""
    },
    {
      "reference": {
        "path": "",
        "baseUrl": "/",
        "fileName": "404",
        "extension": "html",
        "usePrettyUrl": false,
        "link": "/404.html"
      },
      "description": "",
      "title": "Mediandraa",
      "content": ""
    }
  ]
}