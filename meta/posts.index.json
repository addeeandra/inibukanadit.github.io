{
  "ownKey": "posts",
  "childrenPages": {
    "general": {
      "ownKey": "general",
      "childrenPages": {"2019": {
        "ownKey": "2019",
        "childrenPages": {"10": {
          "ownKey": "10",
          "childrenPages": {"28": {
            "ownKey": "28",
            "childrenPages": {"belajar-tinjauan-literatur-1": {
              "ownKey": "belajar-tinjauan-literatur-1",
              "ownPages": [{
                "reference": {
                  "path": "general/2019/10/28",
                  "baseUrl": "http://localhost:8080",
                  "fileName": "belajar-tinjauan-literatur-1/",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "http://localhost:8080/general/2019/10/28/belajar-tinjauan-literatur-1"
                },
                "description": "",
                "title": "Belajar : Tinjauan Literatur #1",
                "content": "<h2 id=\"judul\">Judul<\/h2>\n<p>Analisa Perbandingan Metode Thresholding dan Laplace of Gaussian pada Kematangan Buah Tomat Berbasis Nilai RGB<\/p>\n<hr />\n<h2 id=\"penulis--institusi-penulis\">Penulis &amp; Institusi Penulis<\/h2>\n<p>Khairu Saleh (Mahasiswa Prodi TI STMIK Budidarma Medan)\nMuhammad Syahrizal (Dosen Tetap STMIK Budidarma Medan)<\/p>\n<hr />\n<h2 id=\"sumber-jurnal\">Sumber Jurnal<\/h2>\n<p><a href=\"https://ejurnal.stmik-budidarma.ac.id/index.php/pelita/article/view/258/226\">https://ejurnal.stmik-budidarma.ac.id/index.php/pelita/article/view/258/226<\/a> - (2017)<\/p>\n<hr />\n<h2 id=\"ringkasan-abstrak--tujuan\">Ringkasan Abstrak &amp; Tujuan<\/h2>\n<p>Tomat memiliki proses kematangan yang relatif cepat, maka klasifikasi tingkat kematangan tomat bisa mengurangi resiko pembusukan tomat. Pada tahap preprocessing dilakukan perbaikan citra dengan dua cara, yaitu perbaikan nilai RGB dan pencarian nilai indeks piksel. Proses pengolahan citra diawali mengubah citra menjadi grayscale, kemudian diproses dengan metode thresholding, kemudian dapat menghasilkan plot contour. Dibutuhkan pula deteksi tepi untuk menangani kualitas citra, maka digunakanlah metode Laplace of Gaussian (LoG).\nTujuannya adalah mengetahui hasil akhir dari penerapan metode Thresholding dan Laplacian of Gaussian untuk mendeteksi kematangan buah tomat. Dilandasi oleh pemikiran tentang Thresholding.<\/p>\n<hr />\n<h2 id=\"ringkasan-konsep--landasan-pemikiran\">Ringkasan Konsep / Landasan Pemikiran<\/h2>\n<p>Landasan pemikiran yang digunakan adalah teori Thresholding dan Basic Global Thresholding. Dimana Thresholding digunakan untuk mengubah citra digital menjadi citra biner dari hasil Grayscale Transform (GST). Sedangkan Basic Global Thresholding menghasilkan hal yang sama, namun dengan lingkungan yang bisa dikontrol.<\/p>\n<hr />\n<h2 id=\"metodologi-yang-digunakan\">Metodologi yang Digunakan<\/h2>\n<p>Menggunakan metode Thresholding, Basic Global Thresholding dan Laplace of Gaussian (LoG).<\/p>\n<hr />\n<h2 id=\"ringkasan-proses-penelitian\">Ringkasan Proses Penelitian<\/h2>\n<p>Langkah - langkah penelitian terdiri dari :<\/p>\n<ol>\n<li>\n<p><strong>Analisa citra<\/strong> - Menyiapkan beberapa data citra dengan ukuran 256x256 pixel untuk proses pengujian. Namun, karena prosesnya bisa terlalu lama, maka diperlukan kompresi ukuran citra menjadi 30x30 pixel.<\/p>\n<\/li>\n<li>\n<p><strong>Analisa penerapan metode<\/strong> - Pengujian pixel RGB menggunakan microsoft excel dengan baris x kolom berjumlah 30 x 30 sesuai dengan ukuran citra. Kemudian, dilakukan penentuan Threshold RGB kematangan buah tomat sbb. :<\/p>\n<\/li>\n<\/ol>\n<pre><code class=\"language-javascript\">Red \t= 92 - 100\nGreen \t= 170 - 210\nBlue\t= 0 - 90\n<\/code><\/pre>\n<ol start=\"3\">\n<li><strong>Implementasi<\/strong> - Diperlukan minimum requirements dan maximum requirements agar aplikasi dapat berjalan dengan lancar. Pada penerapannya, menggunakan VB.NET yang berupa aplikasi Desktop. Pada aplikasi Desktop tersebut, pengguna dapat memilih file gambar untuk diproses, kemudian menekan tombol \u2018Riset\u2019 dan keluar output berupa hasil proses Grayscaling sekaligus ditunjukkan grafik histogram dari hasil Thresholding.<\/li>\n<\/ol>\n<h2 id=\"ringkasan-kesimpulan\">Ringkasan Kesimpulan<\/h2>\n<p>Proses deteksi buah tomat menggunakan deteksi RGB. Proses Thresholding digunakan untuk memisahkan antara latar belakang dengan objek yang dideteksi, yaitu buah tomat itu sendiri. Aplikasi pengolahan citra deteksi buah tomat ini dibuat dengan VB.NET 2008 dengan GUI (Graphic User Interface).<\/p>\n<h2 id=\"komentar\">Komentar<\/h2>\n<ul>\n<li>\n<p>Judul yang dibawakan oleh penulis adalah topik yang menarik dan bisa diterapkan secara nyata di industri, khususnya jika diterapkan untuk melakukan otomasi pemisahan tomat yang belum matang, sudah matang ataupun yang sudah busuk.<\/p>\n<\/li>\n<li>\n<p>Sayangnya pada paper yang ditulis, tidak dijelaskan penggunaan metode Laplacian of Gaussian (LoG) sesuai dengan judul yang tercantum. Penulis lebih menekankan kepada kata RGB dan metode Grayscaling.<\/p>\n<\/li>\n<li>\n<p>Hasil penelitian hanya menghasilkan sebuah aplikasi VB.NET yang tidak menunjukkan apakah buah tomat tersebut sudah matang atau belum, hanya menunjukkan grafik Histogram dari hasil Thresholding. Jadinya, pengguna harus secara manual memahami bahwa histogram tersebut menunjukkan citra buah tomat yang sudah matang.\nPenulis juga tidak menunjukkan berapa lama proses Thresholding, penentuan matang atau tidaknya citra buah tomat yang diproses. Padahal, itu adalah hasil yang sangat berguna agar bisa dibandingkan dengan metode lain.<\/p>\n<\/li>\n<\/ul>\n"
              }]
            }}
          }}
        }}
      }}
    },
    "tutorial": {
      "ownKey": "tutorial",
      "childrenPages": {"2019": {
        "ownKey": "2019",
        "childrenPages": {"10": {
          "ownKey": "10",
          "childrenPages": {
            "29": {
              "ownKey": "29",
              "childrenPages": {"learning-ionic-part-1": {
                "ownKey": "learning-ionic-part-1",
                "ownPages": [{
                  "reference": {
                    "path": "tutorial/2019/10/29",
                    "baseUrl": "http://localhost:8080",
                    "fileName": "learning-ionic-part-1/",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "http://localhost:8080/tutorial/2019/10/29/learning-ionic-part-1"
                  },
                  "next": {
                    "path": "tutorial/2019/10/30",
                    "baseUrl": "http://localhost:8080",
                    "fileName": "how-my-repositories-organized---id/",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "http://localhost:8080/tutorial/2019/10/30/how-my-repositories-organized---id"
                  },
                  "description": "",
                  "title": "Learning IONIC Framework - Part #1",
                  "content": "<h2 id=\"introduction\">Introduction<\/h2>\n<p><strong>IONIC<\/strong> is a mobile application development framework for Hybrid Apps using Javascript based on Cordova.\nWithin this series I'll use <strong>ionic-angular<\/strong> codebase. And our first steps are the installation and preparation process for further\ndevelopment.<\/p>\n<hr />\n<h2 id=\"preparation\">Preparation<\/h2>\n<p><strong>IONIC<\/strong> is a lightweight frameworks, so don't worry with your computer, at least you have 2GB RAM and 50 GB Disk Drive are enough, though.\nThe software requirements are more important, here are the list :<\/p>\n<ul>\n<li>Node &amp; NPM - <a href=\"https://nodejs.org/en/\">Install here<\/a><\/li>\n<li>Text Editor (You may use VS Code, Sublime or Notepad++)<\/li>\n<li>Basic knowledge for <code>CMD<\/code> / <code>Terminal<\/code> commands<\/li>\n<li>Fluent knowledge with <code>Javascript<\/code> (or at least, understands the Object Oriented Programming)<\/li>\n<\/ul>\n<hr />\n<h2 id=\"npm-installation\">NPM Installation<\/h2>\n<p>You could read the <a href=\"https://nodejs.org/en/download/package-manager/\">NPM docs here<\/a> for the installation process. Just ensure that the installation are correct by runing these commands : <code>npm -v<\/code> and <code>node --version<\/code>.<\/p>\n<p>If those 2 commands return the expected outputs without any error. You'll be ready to go!<\/p>\n<hr />\n<h2 id=\"work-in-progress\">[Work in Progress]<\/h2>\n"
                }]
              }}
            },
            "30": {
              "ownKey": "30",
              "childrenPages": {"how-my-repositories-organized---id": {
                "ownKey": "how-my-repositories-organized---id",
                "ownPages": [{
                  "reference": {
                    "path": "tutorial/2019/10/30",
                    "baseUrl": "http://localhost:8080",
                    "fileName": "how-my-repositories-organized---id/",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "http://localhost:8080/tutorial/2019/10/30/how-my-repositories-organized---id"
                  },
                  "previous": {
                    "path": "tutorial/2019/10/29",
                    "baseUrl": "http://localhost:8080",
                    "fileName": "learning-ionic-part-1/",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "http://localhost:8080/tutorial/2019/10/29/learning-ionic-part-1"
                  },
                  "description": "",
                  "title": "Bagaimana Aku Menangani Repositories di Android",
                  "content": "<h2 id=\"pembuka\">Pembuka<\/h2>\n<p>Arsitektur dalam pengembangan aplikasi itu penting, biar ngga keteteran sana sini ketika ngoding, apalagi <em>maintenance<\/em>. Tentu kita <em>ga<\/em> bisa <em>stuck<\/em> dengan cara ngoding tradisional tanpa arsitektur. <strong>Ha?<\/strong><\/p>\n<p>Ya maksudnya, kita punya puluhan bahkan ratusan <em>method<\/em> di dalam satu <em>activity<\/em>.<\/p>\n<p>Misalnya kita mau <strong>open connection<\/strong> ke SQLite, kita <strong>copas<\/strong> dari class activity yang sudah nerapin kodingan tersebut, karena kita ga mau susah. Atau, kita lakukan penarikan data SQLite dan membuat <strong>request API<\/strong> di dalam activity.<\/p>\n<p><strong>... DI DALAM ACTIVITY WOI!<\/strong><\/p>\n<p>&quot;Tapi kan, data-nya emang dibutuhkan sama Activity itu.&quot;<\/p>\n<p>Hm.<\/p>\n<p>Ya emang <em>sih<\/em>. TAPI YA, itu bikin NGERI. Semisal kamu punya 50 Activity, kemudian ada update di 1 API, kamu mau ganti satu - satu ngliatin activity-nya? <em>Ngga deh<\/em>, mending yuk move-on!<\/p>\n<p>Minimal, gunakan <strong>repository pattern<\/strong>.<\/p>\n<p>&quot;<em>Ha?<\/em> Github donk. Pake <em>repository<\/em>.&quot;<\/p>\n<p>Bukan WOI.<\/p>\n<p>Tapi, <em>okelah<\/em> begini penjelasannya.<\/p>\n<hr />\n<h2 id=\"tentang-repository\">Tentang Repository<\/h2>\n<p>Repository berguna sebagai <strong>single source of truth<\/strong> atas semua data yang kamu punya. Ini adalah ilustrasi yang menggambarkannya dengan baik, lihat :<\/p>\n<p><img src=\"/assets/media/graphs/img-repo-1.png\" alt=\"Ilustrasi 1\" title=\"Ilustrasi Single Repository\" /><\/p>\n<p>Gambar di atas sudah menjelaskan cukup baik tentang konsep <strong>single source of truth<\/strong> dari <strong>repository<\/strong>, dimana <strong>repository<\/strong> menjadi satu - satunya sumber atas semua data yang diambil, dari <strong>API<\/strong> maupun <strong>SQLite<\/strong>.<\/p>\n<p>Maka, apabila <strong>LoginActivity<\/strong> membutuhkan proses login dari API, maka <strong>LoginActivity<\/strong> hanya perlu melaksanakan proses login melalui <strong>repository<\/strong>. Begitu pula, apabila <strong>HomeActivity<\/strong> memerlukan data profil pengguna, berita ataupun list banner, maka <strong>HomeActivity<\/strong> tersebut perlu meminta melalui <strong>repository<\/strong> juga.<\/p>\n<p>Sayangnya, itu hanya SATU repository.<\/p>\n<p>Pada penerapan <strong>repository<\/strong>, kita bisa membuat <strong>1 singleton class<\/strong> untuk mengatur semua aliran data. TAPI YA, namanya <strong>singleton<\/strong>, kalo makin banyak Endpoint API dan <em>table<\/em> SQLite yang dibuat, pasti semakin <em>gemuk<\/em> dan tidak beraturan jadinya.<\/p>\n<hr />\n<p>Oleh karena itu, diperlukan klasifikasi <strong>repository<\/strong> yang lebih spesifik, seperti ini :<\/p>\n<p><img src=\"/assets/media/graphs/img-repo-2.png\" alt=\"Ilustrasi 2\" title=\"Ilustrasi Multi Repository\" /><\/p>\n<p>Di sini kita membagi <strong>repository<\/strong> menjadi 3 tugas spesifik :<\/p>\n<ol>\n<li>\n<p><strong>User Repository<\/strong> - Dimana <strong>UserRepository<\/strong> bertanggungjawab atas semua data yang berhubungan dengan <strong>user<\/strong>. Seperti proses pendaftaran, autentikasi, pengambilan profil ataupun melakukan perubahan profil.<\/p>\n<\/li>\n<li>\n<p><strong>News Repository<\/strong> - Bertanggungjawab atas semua data yang berhubungan dengan <strong>berita<\/strong>. Seperti pengambilan data berita, penyaringan (filter) berita, berita populer ataupun proses pemberian komentar / like kepada berita tertentu.<\/p>\n<\/li>\n<li>\n<p><strong>Content Repository<\/strong> - Bertanggungjawab atas data yang berhubungan dengan konten atau preferensi singkat. Seperti <em>list<\/em> banner, notifikasi, penggunaan tema <em>dark / light<\/em> dan semacamnya.<\/p>\n<\/li>\n<\/ol>\n<p>Penentuan <strong>jenis repository<\/strong> ini terserah kalian. Sesuaikan saja dengan kondisi dan kebutuhan.<\/p>\n<hr />\n<p>Meskipun kita membagi <strong>repository<\/strong> menjadi 3 bagian, BUKAN BERARTI bahwa SQLite dan API-nya harus ada 3. Ilustrasinya seperti ini :<\/p>\n<p><img src=\"/assets/media/graphs/img-repo-3.png\" alt=\"Ilustrasi 3\" title=\"Ilustrasi Multi Repository (2)\" /><\/p>\n<p>Dari ilustrasi di atas, akses API hanya ada 1, namun API memiliki beberapa <strong>endpoints<\/strong> seperti :<\/p>\n<ul>\n<li>login [<strong>POST<\/strong> /api/v1/login]<\/li>\n<li>register [<strong>POST<\/strong> /api/v1/register]<\/li>\n<li>profile [<strong>GET<\/strong> /api/v1/me]<\/li>\n<li>allnews [<strong>GET<\/strong> /api/v1/news]<\/li>\n<li>filternews [<strong>GET<\/strong> /api/v1/news?query=search&amp;sort=relevance]<\/li>\n<li>popularnews [<strong>GET<\/strong> /api/v1/news?by=popular]<\/li>\n<li>bannerlist [<strong>GET<\/strong> /api/v1/banners]<\/li>\n<li>dan lainnya.<\/li>\n<\/ul>\n<p>Kemudian untuk setiap <strong>endpoints<\/strong> kita menentukan tipe <strong>repository<\/strong>-nya :<\/p>\n<ul>\n<li>login [<strong>POST<\/strong> /api/v1/login] - <strong>UserRepo<\/strong><\/li>\n<li>register [<strong>POST<\/strong> /api/v1/register] - <strong>UserRepo<\/strong><\/li>\n<li>profile [<strong>GET<\/strong> /api/v1/me] - <strong>UserRepo<\/strong><\/li>\n<li>allnews [<strong>GET<\/strong> /api/v1/news] - <strong>NewsRepo<\/strong><\/li>\n<li>filternews [<strong>GET<\/strong> /api/v1/news?query=search&amp;sort=relevance] - <strong>NewsRepo<\/strong><\/li>\n<li>popularnews [<strong>GET<\/strong> /api/v1/news?by=popular] - <strong>NewsRepo<\/strong><\/li>\n<li>bannerlist [<strong>GET<\/strong> /api/v1/banners] - <strong>ContentRepo<\/strong><\/li>\n<\/ul>\n<p>Mudah, kan?<\/p>\n"
                }]
              }}
            }
          }
        }}
      }}
    },
    "authors": {
      "ownKey": "authors",
      "childrenPages": {"aditya-chandra": {
        "ownKey": "aditya-chandra",
        "ownPages": [{
          "reference": {
            "path": "authors",
            "baseUrl": "http://localhost:8080",
            "fileName": "aditya-chandra/",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "http://localhost:8080/authors/aditya-chandra"
          },
          "description": "",
          "title": "Aditya Chandra",
          "content": ""
        }]
      }}
    }
  }
}